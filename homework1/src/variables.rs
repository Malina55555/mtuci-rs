use std::io;

fn main () {
	const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
	
	let mut x = 5;
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö —Ä–∞–≤–Ω–æ: {x}");
	x = 6;
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö —Ä–∞–≤–Ω–æ: {x}");
	
	println!("–í —Ç—Ä—ë—Ö —á–∞—Å–∞—Ö - {} —Å–µ–∫—É–Ω–¥", THREE_HOURS_IN_SECONDS);
	
	let x = 5;
    let x = x + 1; // –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ
    {
        let x = x * 2;
        println!("–ó–Ω–∞—á–µ–Ω–∏–µ x –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–≤–Ω–æ: {x}"); //–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ
    }
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö —Ä–∞–≤–Ω–æ: {x}"); // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
	
	let spaces = "   ";
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ spaces —Ä–∞–≤–Ω–æ:{spaces}.");
	// spaces = spaces.len(); - –æ—à–∏–±–∫–∞, –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    let spaces = spaces.len();
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ spaces —Ä–∞–≤–Ω–æ:{spaces}.");
	
	// let guess = "42".parse().expect("Not a number!"); - –æ—à–∏–±–∫–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ-–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
		
	let x = 2.0; // f64
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö (—Ç–∏–ø f64) —Ä–∞–≤–Ω–æ: {x}");
    let y: f32 = 3.0; // f32
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ —É (—Ç–∏–ø f32) —Ä–∞–≤–Ω–æ: {y}");
	
	// addition
    let sum = 5 + 10;
	println!("5 + 10 =  {sum}");
    // subtraction
    let difference = 95.5 - 4.3;
	println!("95.5 - 4.3 = {difference}");
    // multiplication
    let product = 4 * 30;
	println!("4 * 30 = {product}");
    // division
    let quotient = 56.7 / 32.2;
    let truncated = -5 / 3; // Results in -1
	println!("56.7 / 32.2 =  {quotient}");
	println!("-5 / 3 =  {truncated} - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, —Ç.–∫. –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Ü–µ–ª—ã–µ —á–∏–ª–∞, –∞ –Ω–µ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π");
    // remainder
    let remainder = 43 % 5;
	println!("–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç 43/5 = {remainder}");
	
	// –ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø
	let t = true;
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ t —Ä–∞–≤–Ω–æ: {t}");
    let f: bool = false; // with explicit type annotation
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ f —Ä–∞–≤–Ω–æ: {f}");
	
	//—Å–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø
	let c = 'z';
    let z: char = '‚Ñ§'; // with explicit type annotation
    let heart_eyed_cat = 'üòª';
	println!("{},{},{}",c,z,heart_eyed_cat);
	
	//–∫–æ—Ä—Ç–µ–∂ - –º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
	let tup: (i32, f64, u8) = (500, 6.4, 1);
	let (x, y, z) = tup;
	println!("–ó–Ω–∞—á–µ–Ω–∏–µ y –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ (500, 6.4, 1): {y}");
	let five_hundred = tup.0;
    let six_point_four = tup.1;
    let one = tup.2;
	println!("–ö–æ—Ä—Ç–µ–∂: {five_hundred}, {six_point_four}, {one}");
	
	//–º–∞—Å—Å–∏–≤ - –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
	let a = [1, 2, 3, 4, 5];
	let mut index = String::new();
	println!("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–æ—Ç 0 –¥–æ 4) –¥–ª—è –º–∞—Å—Å–∏–≤–∞.");
	io::stdin()
            .read_line(&mut index)
            .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å.");

    let index: usize = index
        .trim()
        .parse()
        .expect("–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û, —Ü–∏—Ñ—Ä–∞–º–∏");

    let element = a[index];

    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index} —Ä–∞–≤–Ω–æ: {element}"); // –≤—ã–≤–µ–¥–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–µ –≤–Ω–µ [0..4]
}